uniform struct PointLight{
	vec4 position;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec3 attenuation;
} light;
uniform struct Material{
	sampler2D texture1;
	sampler2D texture2;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	vec4 emission;
	float shininess;
	vec4 color_obj;
} material;

in struct Vertex {
	vec2 texcoord;
	vec3 normal;
	vec3 lightDir;
	vec3 viewDir;
	float distance;
} Vert;

void main() {
	vec3 normal = normalize(Vert.normal);
	vec3 lightDir = normalize(Vert.lightDir);
	vec3 viewDir = normalize(Vert.viewDir);

	float attenuation = 1.0/(light.attenuation[0] +
	light.attenuation[1] * Vert.distance +
	light.attenuation[2] * Vert.distance * Vert.distance); 	

	vec4 color = material.emission;
	color += material.ambient * light.ambient * attenuation;
	float Ndot = max(dot(normal,lightDir),0.0);
	color +=material.diffuse * light.diffuse * Ndot* attenuation;

	vec3 h = normalize(lightDir + viewDir);
	float n = 16;
	float RdotVpow = max(pow(dot(normal, h), n),0.0);
	color += material.specular * light.specular * RdotVpow * attenuation;
		
	gl_FragColor = color  * material.color_obj;
}